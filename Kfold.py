import math
import os
import shutil
from train import train
from test import test
import numpy as np
import torch
from network import vgg16, vgg16_bn, SVC


# sim_fold为带manifest的图片文件夹，fold为不带
def del_file(path):
    ls = os.listdir(path)
    for i in ls:
        c_path = os.path.join(path, i)
        if os.path.isdir(c_path):
            del_file(c_path)
        else:
            os.remove(c_path)


def copy_file(src, det):
    # src = "./data/train"  # 源文件目录
    # det = "./test"  # 目的文件目录
    for root, _, fnames in os.walk(src):
        for fname in sorted(fnames):  # sorted函数把遍历的文件按文件名排序
            fpath = os.path.join(root, fname)
            shutil.copy(fpath, det)  # 完成文件拷贝
            # print(fname + " has been copied!")


def walk_file(src):
    files = []
    for filename in os.listdir(src):
        files.append(os.path.join(src, filename))
    # print(files)
    return files


# file = walk_file("C:/Users/WeiHH/Desktop/pic")


def copy_pic(src, det, be, ed):
    file = walk_file(src)
    for i in range(be, ed):
        shutil.copy(file[i], det)


def once_train(n):
    del_file('./pics_fold/train')
    del_file('./pics_fold/test')
    for i in range(5):
        if i == n:
            copy_file('./pics/' + str(i + 1), './pics_fold/test')
            print('test files finish')
        else:
            copy_file('./pics/' + str(i + 1), './pics_fold/train')
            print('train files finish')

def once_train_sim(n):
    del_file('./sim_fold1/train')
    del_file('./sim_fold1/test')
    for i in range(5):
        if i == n:
            copy_file('./sim_fold/' + str(i + 1), './sim_fold1/test')
            print('test files finish')
        else:
            copy_file('./sim_fold/' + str(i + 1), './sim_fold1/train')
            print('train files finish')
def once_train_man(n):
    del_file('./fold_data/train')
    del_file('./fold_data/test')
    for i in range(5):
        if i == n:
            copy_file('./fold/' + str(i + 1), './fold_data/test')
            print('test files finish')
        else:
            copy_file('./fold/' + str(i + 1), './fold_data/train')
            print('train files finish')
# leg_file = walk_file('C:/Users/WeiHH/Desktop/LegGray')
# mal_file = walk_file('C:/Users/WeiHH/Desktop/gray')
# for i in range(5):
#     del_file('./pics/' + str(i + 1))
#     copy_pic('C:/Users/WeiHH/Desktop/LegGray', './pics/' + str(i + 1), (int(len(leg_file) / 5)) * i,
#              (int(len(leg_file) / 5)) * (i + 1))
#     copy_pic('C:/Users/WeiHH/Desktop/gray', './pics/' + str(i + 1), (int(len(mal_file) / 5)) * i,
#              (int(len(mal_file) / 5)) * (i + 1))
#     print('fold finish')
'''
注意：Net0 还是Net
原先代码要加softmax
现在代码不用加
'''
def traintest_one_net(Net_type, file_name):
    result = []
    for i in range(5):
        once_train(i)
        train('./pics_fold', 'model' + str(i) + '.pth', Net_type)
        result.append(test('./pics_fold', './model/model' + str(i) + '.pth',Net_type))

    print(result)
    end = open(file_name, "w")  # 改Net名  并且改这里
    for i in range(5):
        end.write('第' + str(i) + '折结果：')
        end.write('\n')
        end.write('acc:')
        end.write(str(result[i][0]))
        end.write('\n')
        end.write('precision:')
        end.write(str(result[i][1]))
        end.write('\n')
        end.write('recall:')
        end.write(str(result[i][2]))
        end.write('\n')
        end.write('fmeature:')
        end.write(str(result[i][3]))
        end.write('\n')
        end.write('specific:')
        end.write(str(result[i][4]))
        end.write('\n')
        end.write('tpr:')
        end.write(str(result[i][5]))
        end.write('\n')
        end.write('fpr:')
        end.write(str(result[i][6]))
        end.write('\n')
        end.write('mcc:')
        end.write(str(result[i][7]))
        end.write('\n')
        end.write('auc:')
        end.write(str(result[i][8]))
        end.write('\n')

    c = np.array(result)
    res = c.mean(axis=0)
    end.write('平均结果：')
    end.write('\n')
    end.write('acc:')
    end.write(str(res[0]))
    end.write('\n')
    end.write('precision:')
    end.write(str(res[1]))
    end.write('\n')
    end.write('recall:')
    end.write(str(res[2]))
    end.write('\n')
    end.write('fmeature:')
    end.write(str(res[3]))
    end.write('\n')
    end.write('specific:')
    end.write(str(res[4]))
    end.write('\n')
    end.write('tpr:')
    end.write(str(res[5]))
    end.write('\n')
    end.write('fpr:')
    end.write(str(res[6]))
    end.write('\n')
    end.write('mcc:')
    end.write(str(res[7]))
    end.write('\n')
    end.write('auc:')
    end.write(str(res[8]))
    end.write('\n')
    print(res)
def traintest_one_net_sim(Net_type, file_name):
    result = []
    for i in range(5):
        once_train_sim(i)
        train('./sim_fold1', 'model' + str(i) + '.pth', Net_type)
        result.append(test('./sim_fold1', './model/model' + str(i) + '.pth',Net_type))

    print(result)
    end = open(file_name, "w")  # 改Net名  并且改这里
    for i in range(5):
        end.write('第' + str(i) + '折结果：')
        end.write('\n')
        end.write('acc:')
        end.write(str(result[i][0]))
        end.write('\n')
        end.write('precision:')
        end.write(str(result[i][1]))
        end.write('\n')
        end.write('recall:')
        end.write(str(result[i][2]))
        end.write('\n')
        end.write('fmeature:')
        end.write(str(result[i][3]))
        end.write('\n')
        end.write('specific:')
        end.write(str(result[i][4]))
        end.write('\n')
        end.write('tpr:')
        end.write(str(result[i][5]))
        end.write('\n')
        end.write('fpr:')
        end.write(str(result[i][6]))
        end.write('\n')
        end.write('mcc:')
        end.write(str(result[i][7]))
        end.write('\n')
        end.write('auc:')
        end.write(str(result[i][8]))
        end.write('\n')

    c = np.array(result)
    res = c.mean(axis=0)
    end.write('平均结果：')
    end.write('\n')
    end.write('acc:')
    end.write(str(res[0]))
    end.write('\n')
    end.write('precision:')
    end.write(str(res[1]))
    end.write('\n')
    end.write('recall:')
    end.write(str(res[2]))
    end.write('\n')
    end.write('fmeature:')
    end.write(str(res[3]))
    end.write('\n')
    end.write('specific:')
    end.write(str(res[4]))
    end.write('\n')
    end.write('tpr:')
    end.write(str(res[5]))
    end.write('\n')
    end.write('fpr:')
    end.write(str(res[6]))
    end.write('\n')
    end.write('mcc:')
    end.write(str(res[7]))
    end.write('\n')
    end.write('auc:')
    end.write(str(res[8]))
    end.write('\n')
    print(res)
def traintest_one_net_man(Net_type, file_name):
    result = []
    for i in range(5):
        once_train_man(i)
        train('./fold_data', 'model' + str(i) + '.pth', Net_type)
        result.append(test('./fold_data', './model/model' + str(i) + '.pth',Net_type))

    print(result)
    end = open(file_name, "w")  # 改Net名  并且改这里
    for i in range(5):
        end.write('第' + str(i) + '折结果：')
        end.write('\n')
        end.write('acc:')
        end.write(str(result[i][0]))
        end.write('\n')
        end.write('precision:')
        end.write(str(result[i][1]))
        end.write('\n')
        end.write('recall:')
        end.write(str(result[i][2]))
        end.write('\n')
        end.write('fmeature:')
        end.write(str(result[i][3]))
        end.write('\n')
        end.write('specific:')
        end.write(str(result[i][4]))
        end.write('\n')
        end.write('tpr:')
        end.write(str(result[i][5]))
        end.write('\n')
        end.write('fpr:')
        end.write(str(result[i][6]))
        end.write('\n')
        end.write('mcc:')
        end.write(str(result[i][7]))
        end.write('\n')
        end.write('auc:')
        end.write(str(result[i][8]))
        end.write('\n')

    c = np.array(result)
    res = c.mean(axis=0)
    end.write('平均结果：')
    end.write('\n')
    end.write('acc:')
    end.write(str(res[0]))
    end.write('\n')
    end.write('precision:')
    end.write(str(res[1]))
    end.write('\n')
    end.write('recall:')
    end.write(str(res[2]))
    end.write('\n')
    end.write('fmeature:')
    end.write(str(res[3]))
    end.write('\n')
    end.write('specific:')
    end.write(str(res[4]))
    end.write('\n')
    end.write('tpr:')
    end.write(str(res[5]))
    end.write('\n')
    end.write('fpr:')
    end.write(str(res[6]))
    end.write('\n')
    end.write('mcc:')
    end.write(str(res[7]))
    end.write('\n')
    end.write('auc:')
    end.write(str(res[8]))
    end.write('\n')
    print(res)

def result_generator(seed_list=list(range(9,100))):
    '''
    seed, Net_type, file_name
    '''
    for seed in seed_list:
        torch.manual_seed(seed)
        traintest_one_net(vgg16_bn, 'result Net0 seed{}.txt'.format(seed))
        traintest_one_net(vgg16, 'result Net seed{}.txt'.format(seed))

def result_generator_sim(seed_list=[32]):
    '''
    seed, Net_type, file_name
    '''
    for seed in seed_list:
        torch.manual_seed(seed)
        traintest_one_net_sim(vgg16_bn, 'result Net  simfold seed{}.txt'.format(seed))
def result_generator_man(seed_list=[32]):
    '''
    seed, Net_type, file_name
    '''
    for seed in seed_list:
        torch.manual_seed(seed)
        traintest_one_net_man(vgg16_bn, 'result Net  manflod seed{}.txt'.format(seed))

if __name__ == '__main__':
    result_generator_man()